name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      NEXT_PUBLIC_SPOTIFY_WEB_CLIENT_ID: ${{ secrets.SPOTIFY_WEB_CLIENT_ID }}
      NEXT_PUBLIC_SPOTIFY_WEB_CLIENT_SECRET: ${{ secrets.SPOTIFY_WEB_CLIENT_SECRET }}
      NEXTAUTH_SECRET: test-secret-for-ci
      NEXTAUTH_URL: http://localhost:3000
      SUPABASE_DB_CONNECTION: ${{ secrets.SUPABASE_DB_CONNECTION }}
      DISCORD_COVERAGE_URL: ${{ secrets.DISCORD_COVERAGE_URL }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Type check
      run: npm run type-check || npm run tsc

    - name: Lint
      run: npm run lint

    - name: Run tests (without coverage)
      run: npm test

  build:
    runs-on: ubuntu-latest
    needs: test

    env:
      NEXT_PUBLIC_SPOTIFY_WEB_CLIENT_ID: ${{ secrets.SPOTIFY_WEB_CLIENT_ID }}
      NEXT_PUBLIC_SPOTIFY_WEB_CLIENT_SECRET: ${{ secrets.SPOTIFY_WEB_CLIENT_SECRET }}
      NEXTAUTH_SECRET: test-secret-for-ci
      NEXTAUTH_URL: http://localhost:3000
      SUPABASE_DB_CONNECTION: ${{ secrets.SUPABASE_DB_CONNECTION }}
      DISCORD_COVERAGE_URL: ${{ secrets.DISCORD_COVERAGE_URL }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build
      run: npm run build

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: build
        path: .next/
        retention-days: 14

  coverage:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging'

    env:
      NEXT_PUBLIC_SPOTIFY_WEB_CLIENT_ID: ${{ secrets.SPOTIFY_WEB_CLIENT_ID }}
      NEXT_PUBLIC_SPOTIFY_WEB_CLIENT_SECRET: ${{ secrets.SPOTIFY_WEB_CLIENT_SECRET }}
      NEXTAUTH_SECRET: test-secret-for-ci
      NEXTAUTH_URL: http://localhost:3000
      SUPABASE_DB_CONNECTION: ${{ secrets.SUPABASE_DB_CONNECTION }}
      DISCORD_COVERAGE_URL: ${{ secrets.DISCORD_COVERAGE_URL }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests with coverage
      run: npm test -- --coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload test coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage
        path: coverage/
        retention-days: 14

    - name: Send coverage webhook
      if: always()
      run: |
        # Parse coverage summary and generate detailed report
        if [ -f coverage/coverage-summary.json ]; then
          echo "Coverage data found, analyzing..."
          
          # Generate detailed coverage analysis using our custom script
          WEBHOOK_PAYLOAD=$(node scripts/analyze-coverage.js)
          
          # Send to Discord if configured
          if [ -n "${{ secrets.DISCORD_COVERAGE_URL }}" ]; then
            echo "Sending detailed coverage report to Discord..."
            WEBHOOK_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/discord_response.txt -X POST "${{ secrets.DISCORD_COVERAGE_URL }}" \
              -H "Content-Type: application/json" \
              -d "$WEBHOOK_PAYLOAD")
            
            echo "Discord webhook response code: $WEBHOOK_RESPONSE"
            if [ "$WEBHOOK_RESPONSE" != "204" ]; then
              echo "Discord webhook response body:"
              cat /tmp/discord_response.txt
            else
              echo "✅ Coverage report sent successfully to Discord!"
            fi
          fi
        else
          echo "❌ Coverage summary file not found!"
          # Send a failure notification to Discord if configured
          if [ -n "${{ secrets.DISCORD_COVERAGE_URL }}" ]; then
            echo "Sending failure notification to Discord..."
            curl -s -X POST "${{ secrets.DISCORD_COVERAGE_URL }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"embeds\": [{
                  \"title\": \"❌ Coverage Report Failed: ${{ github.repository }}\",
                  \"description\": \"Branch: ${{ github.ref_name }}\\nCommit: ${GITHUB_SHA:0:7}\\n\\n**Error:** Coverage data not generated!\\n\\nThis could indicate:\\n• Tests failed to run\\n• Coverage collection failed\\n• Jest configuration issue\",
                  \"color\": 16711680,
                  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
                  \"footer\": {
                    \"text\": \"Check GitHub Actions logs for details\"
                  }
                }]
              }"
          fi
        fi

    # Add a status check summary
    - name: Check Status
      if: always()
      run: |
        STATUS="${{ job.status }}"
        echo "Current job status: $STATUS"
        if [ "$STATUS" = "success" ]; then
          echo "✅ All checks passed!"
          exit 0
        else
          echo "❌ Some checks failed!"
          echo "Job status was: $STATUS"
          exit 1 